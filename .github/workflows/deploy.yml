name: Build, Test & Deploy

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: weather_display_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.4.5'
        bundler-cache: true
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install PostgreSQL client
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client
    
    - name: Test weather_display (unit tests)
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/weather_display_test
        RAILS_ENV: test
        RAILS_MASTER_KEY: ${{ secrets.RAILS_MASTER_KEY }}
      run: |
        cd weather_display
        bundle install
        bundle exec rails db:create RAILS_ENV=test
        bundle exec rails db:schema:load RAILS_ENV=test
        bundle exec rspec --format progress
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build weather_fetcher
      run: |
        cd weather_fetcher
        docker build -t weather_fetcher .
    
    - name: Build weather_display
      run: |
        cd weather_display
        docker build -t weather_display .

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to optimal-city-test.forester.pro
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.FORESTER_HOST }}
        username: root
        key: ${{ secrets.FORESTER_SSH }}
        port: 22
        script: |
          # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
          mkdir -p /var/www/optimalcity
          cd /var/www/optimalcity
          
          # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
          echo "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
          /usr/local/bin/docker-compose -f docker-compose.prod.yml down || true
          
          # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–∑—ã
          echo "üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –æ–±—Ä–∞–∑–æ–≤..."
          docker system prune -f
          
          # –ö–ª–æ–Ω–∏—Ä—É–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
          echo "üì• –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞..."
          if [ -d ".git" ]; then
            git pull origin main
          else
            git clone https://github.com/${{ github.repository }}.git .
          fi
          
          # –°–æ–∑–¥–∞–µ–º .env —Ñ–∞–π–ª
          echo "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
          cp env.prod.example .env
          sed -i "s/your_openweathermap_api_key_here/${{ secrets.WEATHER_API_KEY }}/g" .env
          sed -i "s/your_secure_postgres_password_here/${{ secrets.POSTGRES_PASSWORD || 'weather_password' }}/g" .env
          sed -i "s/your_rails_master_key_here/${{ secrets.RAILS_MASTER_KEY }}/g" .env
          
          # –°–æ–±–∏—Ä–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –≤ production —Ä–µ–∂–∏–º–µ
          echo "üî® –°–±–æ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
          /usr/local/bin/docker-compose -f docker-compose.prod.yml build --no-cache
          
          echo "üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
          /usr/local/bin/docker-compose -f docker-compose.prod.yml up -d
          
          # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
          echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
          sleep 60
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
          echo "üìä –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
          /usr/local/bin/docker-compose -f docker-compose.prod.yml ps
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
          echo "üìã –õ–æ–≥–∏ weather_display:"
          /usr/local/bin/docker-compose -f docker-compose.prod.yml logs --tail=30 weather_display
          
          echo "üìã –õ–æ–≥–∏ weather_fetcher:"
          /usr/local/bin/docker-compose -f docker-compose.prod.yml logs --tail=30 weather_fetcher
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–æ–≤ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
          echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤..."
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º Rails –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
          for i in {1..5}; do
            if curl -f http://localhost:3000 > /dev/null 2>&1; then
              echo "‚úÖ Rails app –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 3000"
              break
            else
              echo "‚è≥ –ü–æ–ø—ã—Ç–∫–∞ $i/5: Rails app –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –∂–¥–µ–º..."
              sleep 10
            fi
          done
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º NATS –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
          for i in {1..5}; do
            if curl -f http://localhost:8222 > /dev/null 2>&1; then
              echo "‚úÖ NATS monitoring –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8222"
              break
            else
              echo "‚è≥ –ü–æ–ø—ã—Ç–∫–∞ $i/5: NATS monitoring –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –∂–¥–µ–º..."
              sleep 10
            fi
          done
          
          echo "üéâ Deployment completed successfully!"
