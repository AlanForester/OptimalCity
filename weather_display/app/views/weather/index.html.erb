<!DOCTYPE html>
<html>
<head>
  <title>–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã</title>
  <script src="https://cdn.tailwindcss.com"></script>
</head>
<body>
  <div class="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-8">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="text-center mb-8">
        <h1 class="text-4xl font-bold text-gray-900 mb-2">–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã</h1>
        <p class="text-lg text-gray-600">–¢–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤–æ–∑–¥—É—Ö–∞ –Ω–∞ <span id="current-date">...</span></p>
        <p class="text-sm text-gray-500 mt-1">–¢–∞–π–º–∑–æ–Ω–∞: <span id="user-timezone">...</span></p>
        <p class="text-xs text-gray-400 mt-1">–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: <span id="last-update">...</span></p>
      </div>

      <div class="grid grid-cols-1 lg:grid-cols-2 gap-8" id="cities-container">
        <% @cities.each_with_index do |city, index| %>
          <div class="bg-white rounded-lg shadow-lg overflow-hidden">
            <div class="bg-gradient-to-r from-blue-500 to-blue-600 px-6 py-4">
              <h2 class="text-2xl font-semibold text-white"><%= city %></h2>
            </div>
            
            <div class="p-6" id="city-<%= index %>-data" data-city="<%= city %>">
              <div class="text-center py-8">
                <div class="text-gray-400 text-6xl mb-4">üå§Ô∏è</div>
                <p class="text-gray-500">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</p>
              </div>
            </div>
          </div>
        <% end %>
      </div>
    </div>
  </div>

  <script>
    // –ü–æ–ª—É—á–∞–µ–º —Ç–∞–π–º–∑–æ–Ω—É –±—Ä–∞—É–∑–µ—Ä–∞
    function getUserTimezone() {
      try {
        return Intl.DateTimeFormat().resolvedOptions().timeZone;
      } catch (e) {
        return 'UTC';
      }
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    function formatLocalDate(dateString) {
      const date = new Date(dateString);
      return date.toLocaleDateString('ru-RU');
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    function formatLocalTime(timestamp) {
      const date = new Date(timestamp);
      return date.toLocaleTimeString('ru-RU', {
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit'
      });
    }

    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–æ—Ä–æ–¥–∞
    function renderCityData(cityName, data, containerId) {
      const container = document.getElementById(containerId);
      
      if (!data || data.length === 0) {
        container.innerHTML = `
          <div class="text-center py-8">
            <div class="text-gray-400 text-6xl mb-4">üå§Ô∏è</div>
            <p class="text-gray-500">–î–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã</p>
            <p class="text-sm text-gray-400 mt-2">–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É —Å–µ—Ä–≤–∏—Å–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö</p>
          </div>
        `;
        return;
      }

      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (—Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ –º–∏–Ω—É—Ç—ã)
      const groupedData = {};
      data.forEach(item => {
        const date = new Date(item.timestamp);
        const timeKey = date.toLocaleTimeString('ru-RU', {
          hour: '2-digit',
          minute: '2-digit'
        });
        
        if (!groupedData[timeKey]) {
          groupedData[timeKey] = [];
        }
        groupedData[timeKey].push(item);
      });

      let html = '<div class="space-y-3">';
      
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª—é—á–∏ –≤—Ä–µ–º–µ–Ω–∏ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
      const sortedTimes = Object.keys(groupedData).sort((a, b) => {
        const timeA = new Date(`2000-01-01 ${a}`);
        const timeB = new Date(`2000-01-01 ${b}`);
        return timeB - timeA;
      });
      
      sortedTimes.forEach(timeKey => {
        const items = groupedData[timeKey];
        const latestItem = items[0]; // –ë–µ—Ä–µ–º —Å–∞–º—É—é —Å–≤–µ–∂—É—é –∑–∞–ø–∏—Å—å
        const tempClass = latestItem.temperature >= 0 ? 'text-red-600' : 'text-blue-600';
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π, –µ—Å–ª–∏ –∏—Ö –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π
        const countBadge = items.length > 1 ? 
          `<span class="ml-2 px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded-full">${items.length}</span>` : '';
        
        html += `
          <div class="flex justify-between items-center p-3 bg-gray-50 rounded-lg">
            <div class="flex items-center space-x-3">
              <div class="w-3 h-3 bg-blue-500 rounded-full"></div>
              <span class="text-gray-700 font-medium">
                ${timeKey}${countBadge}
              </span>
            </div>
            <div class="text-right">
              <span class="text-2xl font-bold ${tempClass}">${latestItem.temperature}¬∞C</span>
            </div>
          </div>
        `;
      });
      
      html += '</div>';
      container.innerHTML = html;
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ
    async function loadWeatherData() {
      const timezone = getUserTimezone();
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–π–º–∑–æ–Ω—ã
      document.getElementById('user-timezone').textContent = timezone;
      
      try {
        const response = await fetch(`/api/v1/weather?timezone=${encodeURIComponent(timezone)}`);
        const result = await response.json();
        
        if (result.success) {
          // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É
          document.getElementById('current-date').textContent = result.user_date;
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
          document.getElementById('last-update').textContent = new Date().toLocaleTimeString('ru-RU');
          
          // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≥–æ—Ä–æ–¥–∞
          Object.keys(result.data).forEach(cityName => {
            const containers = document.querySelectorAll('[data-city="' + cityName + '"]');
            containers.forEach(container => {
              renderCityData(cityName, result.data[cityName], container.id);
            });
          });
        } else {
          console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', result.error);
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è –≤—Å–µ—Ö –≥–æ—Ä–æ–¥–æ–≤
          document.querySelectorAll('[id^="city-"][id$="-data"]').forEach(container => {
            container.innerHTML = '<div class="text-center py-8"><p class="text-red-500">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö</p></div>';
          });
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error);
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è –≤—Å–µ—Ö –≥–æ—Ä–æ–¥–æ–≤
        document.querySelectorAll('[id^="city-"][id$="-data"]').forEach(container => {
          container.innerHTML = '<div class="text-center py-8"><p class="text-red-500">–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è</p></div>';
        });
      }
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    document.addEventListener('DOMContentLoaded', function() {
      loadWeatherData();
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
      setInterval(loadWeatherData, 5 * 60 * 1000);
    });
  </script>
</body>
</html>
